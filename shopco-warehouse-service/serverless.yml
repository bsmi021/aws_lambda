service: shopco-warehouse-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-location-${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  exclude:
    - venv/**
    - node_modules/**
    - secrets.yml

functions:
  location-create:
    handler: locations/create.create
    events:
      - http:
          path: locations
          method: post
          cors: true
  location-update:
    handler: locations/update.update
    events:
      - http:
          path: locations/{id}
          method: put
          cors: true
  location-delete:
    handler: locations/delete.delete
    events:
      - http:
          path: locations/{id}
          method: delete
          cors: true
  location-get:
    handler: locations/get.get
    events:
      - http:
          path: locations/{id}
          method: get
          cors: true
  location-list:
    handler: locations/list.list
    events:
      - http:
          path: locations
          method: get
          cors: true

resources:
  Resources:
    LocationsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    CreateSiteTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Create Site Topic'
        TopicName: ${self:service}-create-${opt:stage, self:provider.stage}
    ModifySiteTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Modify Site Topic'
        TopicName: ${self:service}-modify-${opt:stage, self:provider.stage}
    DeleteSiteTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Delete Site Topic'
        TopicName: ${self:service}-delete-${opt:stage, self:provider.stage}
    SiteTopicPolicy:
      Type: 'AWS::SNS::TopicPolicy'
      Properties:
        PolicyDocument:
          Id: SiteTopicPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal: "*"
              Action:
                SNS:Publish
              Resource: "*"
        Topics:
          - !Ref CreateSiteTopic
          - !Ref ModifySiteTopic
          - !Ref DeleteSiteTopic

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: false