service: shopco-ordering-service 

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  exclude:
    - venv/**
    - node_modules/**
    - secrets.yml

functions:
  ordering-create:
    handler: ordering/create.create
    events:
      - http:
          path: ordering
          method: post
          cors: true
    environment:
      TOPIC: !Ref CreateOrderTopic

resources:
  Resources:
    OrdersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customer_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: "customer_id-id-index"
            KeySchema:
              - AttributeName: customer_id
                KeyType: "HASH"
              -
                AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE}


    CreateOrderTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Create Shopco Order Topic'
        TopicName: ${self:service}-create-${opt:stage, self:provider.stage}
    OrderTopicPolicy:
      Type: 'AWS::SNS::TopicPolicy'
      Properties:
        PolicyDocument:
          Id: OrderTopicPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal: "*"
              Action:
                SNS:Publish
              Resource: "*"
        Topics:
          - !Ref CreateOrderTopic
    CreateOrderQueue:
      Type: 'AWS::SQS::Queue'
      DeletionPolicy: Retain
      Properties:
        QueueName: ${self:service}-create-${opt:stage, self:provider.stage}
    NifiCreateOrderQueue:
      Type: 'AWS::SQS::Queue'
      DeletionPolicy: Retain
      Properties:
        QueueName: ${self:service}-nifi-create-${opt:stage, self:provider.stage}
    CreateOrderQueuePolicy:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Id: CreateOrderQueuePolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal: "*"
              Action: sqs:*
              Resource: "*"
              Condition:
                ArnEquals: 
                  aws:SourceArn: !Ref CreateOrderTopic
        Queues:
            - !Ref CreateOrderQueue
            - !Ref NifiCreateOrderQueue
    CreateOrderQueueSNSSub:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt
          - CreateOrderQueue
          - Arn
        TopicArn: !Ref CreateOrderTopic
    NifiCreateOrderSNSSub:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt
          - NifiCreateOrderQueue
          - Arn
        TopicArn: !Ref CreateOrderTopic

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: false