service: shopco-ordering-service 

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  role: arn:aws:iam::#{AWS::AccountId}:role/lambda-vpc-role
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - rds:*
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        - "*"

package:
  exclude:
    - venv/**
    - node_modules/**
    - secrets.yml

functions:
  db-insert:
    handler: orders/db/insert.insert
    environment:
      db: orders
      user: ${self:custom.secrets.DB_USER}
      pass: ${self:custom.secrets.DB_PASS}
      host: ${self:custom.secrets.DB_HOST}
      port: ${self:custom.secrets.DB_PORT}
    vpc:
      securityGroupIds:
        - sg-8e8dafe1
      subnetIds:
        - subnet-05737cb9604a122e3
        - subnet-03e728315e893d501
    events:
      - sqs:
          arn: 'arn:aws:sqs:${opt:region, self:provider.region}:#{AWS::AccountId}:${self:resources.Resources.CreateOrderQueue.Properties.QueueName}'
          batchSize: 10
  create:
    handler: orders/create.create
    events:
      - http:
          path: orders
          method: post
          cors: true
    environment:
      TOPIC: !Ref CreateOrderTopic

resources:
  Resources:
    CreateOrderTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: 'Create Shopco Order Topic'
        TopicName: ${self:service}-create-${opt:stage, self:provider.stage}
    OrderTopicPolicy:
      Type: 'AWS::SNS::TopicPolicy'
      Properties:
        PolicyDocument:
          Id: OrderTopicPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal: "*"
              Action:
                SNS:Publish
              Resource: "*"
        Topics:
          - !Ref CreateOrderTopic
    CreateOrderQueue:
      Type: 'AWS::SQS::Queue'
      DeletionPolicy: Retain
      Properties:
        QueueName: ${self:service}-create-${opt:stage, self:provider.stage}
    NifiCreateOrderQueue:
      Type: 'AWS::SQS::Queue'
      DeletionPolicy: Retain
      Properties:
        QueueName: ${self:service}-nifi-create-${opt:stage, self:provider.stage}
    CreateOrderQueuePolicy:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Id: CreateOrderQueuePolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal: "*"
              Action: sqs:*
              Resource: "*"
              Condition:
                ArnEquals: 
                  aws:SourceArn: !Ref CreateOrderTopic
        Queues:
            - !Ref CreateOrderQueue
            - !Ref NifiCreateOrderQueue
    CreateOrderQueueSNSSub:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt
          - CreateOrderQueue
          - Arn
        TopicArn: !Ref CreateOrderTopic
    NifiCreateOrderSNSSub:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt
          - NifiCreateOrderQueue
          - Arn
        TopicArn: !Ref CreateOrderTopic

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: true