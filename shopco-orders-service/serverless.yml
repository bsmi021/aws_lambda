# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shopco-orders-service # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  role: arn:aws:iam::#{AWS::AccountId}:role/lambda-vpc-role
  stage: dev
    
custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - rds:*
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        - "*"

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - venv/**
    - node_modules/**
    - secrets.yml

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

functions:
  insertOrderDb:
    handler: orders/createdb.insert
    environment:
      db: orders
      user: ${self:custom.secrets.DB_USER}
      pass: ${self:custom.secrets.DB_PASS}
      host: ${self:custom.secrets.DB_HOST}
      port: ${self:custom.secrets.DB_PORT}
    vpc:
      securityGroupIds:
        - sg-8e8dafe1
      subnetIds:
        - subnet-05737cb9604a122e3
        - subnet-03e728315e893d501
    events:
      - sqs:
          arn: 'arn:aws:sqs:${opt:region, self:provider.region}:#{AWS::AccountId}:${self:resources.Resources.CreateOrderQueue.Properties.QueueName}'
            #"arn:aws:sqs:${opt:region, self:provider.region}:${d{12}}:${self:resources.Resources.CreateOrderQueue.Properties.QueueName}"
          batchSize: 10
  create:
    handler: orders/create.create
    events:
      - http:
          path: orders
          method: post
          cors: true
    environment:
      QUEUE_NAME: ${self:resources.Resources.CreateOrderQueue.Properties.QueueName} 
        #shopco_order_added

custom:
  pythonRequirements:
    dockerizePip: true

resources:
  Resources:
    CreateOrderQueue:
      Type: 'AWS::SQS::Queue'
      DeletionPolicy: Retain
      Properties:
        QueueName: ${self:service}-create-${opt:stage, self:provider.stage}
    CreateOrderQueuePolicy:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Id: CreateOrderQueuePolicy
          Version: '2012-10-17'
          Statement:
            - Sid: "1"
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::#{AWS:AccountId}:role/lambda-vpc-role
              Action: sqs:*
              Resource: "*"
        Queues:
            - !Ref CreateOrderQueue


